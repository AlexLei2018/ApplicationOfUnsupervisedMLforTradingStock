import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.svm import OneClassSVM
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# --- 1. Prepare Data Including a Historical Crisis Period ---
print("Downloading SPY data...")
spy_data = yf.download('SPY', start='2018-01-01', end='2021-12-31', auto_adjust=True, progress=False)

# Check if data was downloaded successfully
if spy_data.empty:
    print("Error: Failed to download SPY data. Cannot continue. Please check your network connection or the ticker symbol.")
else:
    print("Data downloaded successfully.")
    returns = spy_data['Close'].pct_change()
    
    # [CORE CORRECTION]: First, create the DataFrame, then remove NaNs generated by rolling calculations
    market_features = pd.DataFrame(index=returns.index)
    market_features['Return'] = returns
    market_features['Volatility_20D'] = returns.rolling(20).std() * np.sqrt(252) # Annualized volatility
    
    # After all features are calculated, drop rows containing NaN values
    market_features.dropna(inplace=True)

    # --- 2. Train the Model on a "Normal" Period ---
    training_period_end = '2020-01-31'
    train_data = market_features.loc[:training_period_end]
    
    # Initialize the scaler using data from the training set
    scaler = StandardScaler().fit(train_data)
    # Standardize the entire dataset
    scaled_features = scaler.transform(market_features)
    
    ocsvm = OneClassSVM(nu=0.03, kernel='rbf', gamma='auto')
    print("\nTraining One-Class SVM model to learn 'normal' market patterns...")
    # Train using the standardized training data
    ocsvm.fit(scaler.transform(train_data))

    # --- 3. Make Predictions on the Entire Dataset ---
    predictions_ocsvm = ocsvm.predict(scaled_features)
    results_ocsvm_df = market_features.copy()
    results_ocsvm_df['Is_Anomaly'] = predictions_ocsvm

    anomalies = results_ocsvm_df[results_ocsvm_df['Is_Anomaly'] == -1]

    # --- 4. Visualize the Results ---
    fig, ax = plt.subplots(figsize=(16, 6))
    ax.plot(spy_data.index, spy_data['Close'], label='SPY Price', color='black', zorder=1)
    # Ensure scatter points are plotted only on dates where feature data exists
    anomalies_prices = spy_data['Close'].reindex(anomalies.index)
    ax.scatter(anomalies_prices.index, anomalies_prices, 
                color='red', marker='o', s=50, label='Anomaly Detected (COVID Crash)', zorder=2)
    ax.set_title('One-Class SVM Anomaly Detection on Market Regimes')
    ax.legend()
    plt.show()
    